version: '3.8'
services:

  publisher:
    container_name: publisher
    build:
      context: ./publisher
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - kafka1

  consumer:
    container_name: consumer
    build:
      context: ./Consumer
      dockerfile: ./Consumer.Api/Dockerfile
    ports:
      - "8090:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      - kafka1
      - persistence

  persistence:
    container_name: persistence
    build:
      context: ./persistence
      dockerfile: Dockerfile
    ports:
      - "8888:8888"
    depends_on:
      mongo:
        condition: service_healthy

  #########
  # INFRA #
  #########

  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:1.58
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    ports:
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "4317:4317"
      - "4318:4318"
      - "9411:9411"
      - "14268:14268"
      - "14250:14250"
      - "16686:16686"
  grafana:
    container_name: grafana
    image: grafana/grafana:11.1.0
    ports:
      - "3000:3000"
    environment:
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_BASIC_ENABLED=false
    volumes:
      - ./Grafana:/etc/grafana/provisioning/
    depends_on:
      - jaeger

  mongo:
    image: mongo:7.0
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    healthcheck:
      test:  echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
  mongo-express:
    image: mongo-express:1.0
    container_name: mongo-express
    depends_on:
      mongo:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_BASICAUTH: false
  
  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:5.1.2
    restart: always
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: "2181"
      ZOOKEEPER_TICK_TIME: "2000"
      ZOOKEEPER_SERVERS: "zookeeper:22888:23888"
    ports:
      - "2181:2181"
    volumes:
      - ./volumes/zookeeper/data:/var/lib/zookeeper/data
      - ./volumes/zookeeper/log:/var/lib/zookeeper/log

  kafka1:
    container_name: kafka1
    image: confluentinc/cp-enterprise-kafka:5.1.2
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092,PLAINTEXT_HOST://kafka1:29092
      KAFKA_ADVERTISED_HOST_NAME: kafka1
      KAFKA_BROKER_ID: 1
      KAFKA_BROKER_RACK: "r1"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      #KAFKA_SCHEMA_REGISTRY_URL: "schemaregistry:8085"
      KAFKA_JMX_PORT: 9991
    volumes:
      - ./volumes/kafka/data:/var/lib/kafka/data

  # schemaregistry:
  #   container_name: schemaregistry
  #   image: confluentinc/cp-schema-registry:5.1.2
  #   restart: always
  #   depends_on:
  #     - zookeeper
  #   environment:
  #     SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"
  #     SCHEMA_REGISTRY_HOST_NAME: schemaregistry
  #     SCHEMA_REGISTRY_LISTENERS: "http://schemaregistry:8085"
  #   ports:
  #     - "8085:8085"

  # rest-proxy:
  #   image: confluentinc/cp-kafka-rest:7.1.1
  #   depends_on:
  #     - kafka1
  #     #- schemaregistry
  #   ports:
  #     - 8082:8082
  #   hostname: rest-proxy
  #   container_name: rest-proxy
  #   environment:
  #     KAFKA_REST_HOST_NAME: rest-proxy
  #     KAFKA_REST_BOOTSTRAP_SERVERS: 'kafka1:29092'
  #     KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
  #     #KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schemaregistry:8085'
  #     KAFKA_REST_MAX_POLL_INTERVAL_MS: 300000
  #     #KAFKA_REST_CONSUMER_REQUEST_TIMEOUT_MS: 90000

  kafdrop:
    container_name: kafdrop
    image: obsidiandynamics/kafdrop:3.30.0
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka1:9092"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
      #CMD_ARGS: "--schemaregistry.connect=http://schemaregistry:8085 --message.format=AVRO"
    depends_on:
      - kafka1

volumes:
  mongo-data: